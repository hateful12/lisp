(defun associative-list-add (list key value)
  (multiple-value-bind (x is-there) (associative-list-get list key)
    (if is-there
        list
        (cons (cons key value) list))))

(defun associative-list-get (list key)
  (let ((element (first list)))
    (if (eql key (car element))
        (values (cdr element) t)
        (if (eql list '())
            (values nil nil)
            (associative-list-get (cdr list) key)))))

;; Property list
(defun property-list-add (list key value)
  (multiple-value-bind (x is-there) (Property-list-get list key)
    (if is-there
        list
        (cons key (cons value list)))))

(defun property-list-get (list key)
  (if (eql key (first list))
      (values (second list) t)
      (if (eql list '())
          (values nil nil)
          (associative-list-get (cddr list) key))))

;; (string element left right)
;; Binary list
(defun binary-tree-add (tree key value)
  (if (eql tree nil)
      (list key value)
      (let ((str (first tree))
            (val (second tree))
            (left (third tree))
            (right (fourth tree)))
        (if (string< str key)
            (list str val (binary-tree-add left key value) right)
            (if (string> str key)
                (list str val left (binary-tree-add right key value))
                (list str value left right))))))

(defun binary-tree-get (tree key)
  (if (eql tree nil)
      (values nil nil)
      (let ((str (first tree))
            (val (second tree))
            (left (third tree))
            (right (fourth tree)))
        (if (string< str key)
            (binary-tree-get left key)
            (if (string> str key)
                (binary-tree-get right key)
                (values val t))))))

(defun test ()
  (let ((test nil))
    (setf test (associative-list-add test :a 1))
    (pprint (associative-list-get test :a))
    (setf test (associative-list-add test :b 2))
    (pprint (associative-list-get test :b))
    (pprint test))
  (pprint "---------")
  (let ((test nil))
    (setf test (property-list-add test :a 1))
    (pprint (property-list-get test :a))
    (setf test (property-list-add test :b 2))
    (pprint (property-list-get test :b))
    (pprint test))
  (pprint "---------")
  (let ((test nil))
    (setf test (binary-tree-add test "a" 1))
    (pprint (binary-tree-get test "a"))
    (setf test (binary-tree-add test "b" 2))
    (pprint (binary-tree-get test "b"))
    (setf test (binary-tree-add test "abc" 3))
    (pprint (binary-tree-get test "abc"))
    (pprint test))
  (pprint "---------"))
